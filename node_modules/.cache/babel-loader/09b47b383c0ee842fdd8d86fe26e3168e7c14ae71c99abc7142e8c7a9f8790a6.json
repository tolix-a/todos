{"ast":null,"code":"import axios from 'axios';\nimport { create } from 'zustand';\nconst instance = axios.create({\n  baseURL: process.env.REACT_APP_SERVER_URL\n  // baseURL:'https://localhost:4000/todos',\n  // baseURL:'https://port-0-express-server-m0uagft6bec98aeb.sel4.cloudtype.app',\n});\nconst store = create(set => ({\n  data: [],\n  sortData: [],\n  dataCtrl: async function (action) {\n    let res;\n    switch (action.type) {\n      case 'get':\n        res = await instance.get(\"/\");\n        set({\n          data: res.data\n        });\n        break;\n      case 'post':\n        await instance.post(\"/\", action.data);\n        set(state => {\n          return {\n            data: [...state.data, action.data]\n          };\n        });\n        break;\n      case 'put':\n        await instance.put(\"/\", action.data);\n        set(state => {\n          let update = state.data.map(obj => {\n            if (action.data.id == obj.id) {\n              obj.status = action.status;\n            }\n            return obj;\n          });\n          return {\n            data: update\n          };\n        });\n        break;\n      case 'delete':\n        res = await instance.delete(`/?id=${action.data}`);\n        break;\n    }\n    // set({data:res.data});\n  },\n  sortCtrl: function (sort) {\n    set(state => {\n      // true = 일을 끝냄\n      // false = 해야할 일\n\n      let findData;\n      switch (sort.type) {\n        case 'Active':\n          return {\n            sortData: state.data.filter(obj => obj.status == false)\n          };\n        case 'Completed':\n          return {\n            sortData: state.data.filter(obj => obj.status == true)\n          };\n        default:\n          return {\n            sortData: state.data\n          };\n      }\n    });\n  }\n}));\nexport default store;","map":{"version":3,"names":["axios","create","instance","baseURL","process","env","REACT_APP_SERVER_URL","store","set","data","sortData","dataCtrl","action","res","type","get","post","state","put","update","map","obj","id","status","delete","sortCtrl","sort","findData","filter"],"sources":["E:/너굴맨/react/todolist/src/state/store.js"],"sourcesContent":["import axios from 'axios';\r\nimport {create} from 'zustand';\r\n\r\nconst instance = axios.create({\r\n   baseURL: process.env.REACT_APP_SERVER_URL\r\n   // baseURL:'https://localhost:4000/todos',\r\n   // baseURL:'https://port-0-express-server-m0uagft6bec98aeb.sel4.cloudtype.app',\r\n});\r\n\r\n\r\nconst store = create((set)=>({\r\n   data: [],\r\n   sortData: [],\r\n   dataCtrl: async function(action){\r\n      let res;\r\n      switch(action.type){\r\n         case 'get' : \r\n         res = await instance.get(\"/\"); \r\n         set({data:res.data});\r\n         break;\r\n\r\n         case 'post' : \r\n         await instance.post(\"/\",action.data);\r\n         set( (state)=> {\r\n            return {data:[...state.data, action.data]};\r\n         });\r\n         break;\r\n         \r\n         case 'put' : \r\n         await instance.put(\"/\",action.data);\r\n         set( (state)=> {\r\n            let update = state.data.map((obj)=>{\r\n                        if(action.data.id == obj.id){\r\n                           obj.status = action.status\r\n                        }\r\n                        return obj;\r\n                     })\r\n            return {data:update};\r\n         }); \r\n         break;\r\n         \r\n         case 'delete' : \r\n         res = await instance.delete(`/?id=${action.data}`); break;\r\n      }\r\n      // set({data:res.data});\r\n\r\n   },\r\n   sortCtrl: function(sort){\r\n      set((state)=>{\r\n         // true = 일을 끝냄\r\n         // false = 해야할 일\r\n\r\n         let findData;\r\n         switch(sort.type){\r\n            case 'Active': return {sortData: state.data.filter(obj=> obj.status == false)};\r\n            case 'Completed': return {sortData: state.data.filter(obj=> obj.status == true)};\r\n            default: return {sortData: state.data};\r\n         }\r\n      });\r\n   }\r\n}))\r\n\r\nexport default store;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAAQC,MAAM,QAAO,SAAS;AAE9B,MAAMC,QAAQ,GAAGF,KAAK,CAACC,MAAM,CAAC;EAC3BE,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC;EACrB;EACA;AACH,CAAC,CAAC;AAGF,MAAMC,KAAK,GAAGN,MAAM,CAAEO,GAAG,KAAI;EAC1BC,IAAI,EAAE,EAAE;EACRC,QAAQ,EAAE,EAAE;EACZC,QAAQ,EAAE,eAAAA,CAAeC,MAAM,EAAC;IAC7B,IAAIC,GAAG;IACP,QAAOD,MAAM,CAACE,IAAI;MACf,KAAK,KAAK;QACVD,GAAG,GAAG,MAAMX,QAAQ,CAACa,GAAG,CAAC,GAAG,CAAC;QAC7BP,GAAG,CAAC;UAACC,IAAI,EAACI,GAAG,CAACJ;QAAI,CAAC,CAAC;QACpB;MAEA,KAAK,MAAM;QACX,MAAMP,QAAQ,CAACc,IAAI,CAAC,GAAG,EAACJ,MAAM,CAACH,IAAI,CAAC;QACpCD,GAAG,CAAGS,KAAK,IAAI;UACZ,OAAO;YAACR,IAAI,EAAC,CAAC,GAAGQ,KAAK,CAACR,IAAI,EAAEG,MAAM,CAACH,IAAI;UAAC,CAAC;QAC7C,CAAC,CAAC;QACF;MAEA,KAAK,KAAK;QACV,MAAMP,QAAQ,CAACgB,GAAG,CAAC,GAAG,EAACN,MAAM,CAACH,IAAI,CAAC;QACnCD,GAAG,CAAGS,KAAK,IAAI;UACZ,IAAIE,MAAM,GAAGF,KAAK,CAACR,IAAI,CAACW,GAAG,CAAEC,GAAG,IAAG;YACvB,IAAGT,MAAM,CAACH,IAAI,CAACa,EAAE,IAAID,GAAG,CAACC,EAAE,EAAC;cACzBD,GAAG,CAACE,MAAM,GAAGX,MAAM,CAACW,MAAM;YAC7B;YACA,OAAOF,GAAG;UACb,CAAC,CAAC;UACX,OAAO;YAACZ,IAAI,EAACU;UAAM,CAAC;QACvB,CAAC,CAAC;QACF;MAEA,KAAK,QAAQ;QACbN,GAAG,GAAG,MAAMX,QAAQ,CAACsB,MAAM,CAAC,QAAQZ,MAAM,CAACH,IAAI,EAAE,CAAC;QAAE;IACvD;IACA;EAEH,CAAC;EACDgB,QAAQ,EAAE,SAAAA,CAASC,IAAI,EAAC;IACrBlB,GAAG,CAAES,KAAK,IAAG;MACV;MACA;;MAEA,IAAIU,QAAQ;MACZ,QAAOD,IAAI,CAACZ,IAAI;QACb,KAAK,QAAQ;UAAE,OAAO;YAACJ,QAAQ,EAAEO,KAAK,CAACR,IAAI,CAACmB,MAAM,CAACP,GAAG,IAAGA,GAAG,CAACE,MAAM,IAAI,KAAK;UAAC,CAAC;QAC9E,KAAK,WAAW;UAAE,OAAO;YAACb,QAAQ,EAAEO,KAAK,CAACR,IAAI,CAACmB,MAAM,CAACP,GAAG,IAAGA,GAAG,CAACE,MAAM,IAAI,IAAI;UAAC,CAAC;QAChF;UAAS,OAAO;YAACb,QAAQ,EAAEO,KAAK,CAACR;UAAI,CAAC;MACzC;IACH,CAAC,CAAC;EACL;AACH,CAAC,CAAC,CAAC;AAEH,eAAeF,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}